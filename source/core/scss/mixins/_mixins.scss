// -------------------------------------- //
// LogoTypeÂ®: Advance CSS3: Cross Browser //
// -------------------------------------- //
//         Using @mixin directive         //
//                  ~   ~                 //
//                 (.) (.)                //
//                    -                   //
//                  `\^/`                 //
//        @author : Prabhat Kumar         //
//          @date : 11-May-2016           //
// -------------------------------------- //
// Sass - (3.4.21)     : Selective Steve  //
// Compass - (v1.0.3)  : Polaris          //
// -------------------------------------- //

// Path: logotype/source/core/scss/mixins/

// ==========================================
// B. Visually hide an element.
%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

// ==========================================
// C. CSS3 calc mixin.
@mixin axix-calc($property, $value) {
  #{$property}: -webkit-calc(#{$value});
  #{$property}: -moz-calc(#{$value});
  #{$property}: calc(#{$value});
}

// ==========================================
// D. Mixins for semi-transparent colors.
// D-1
@mixin alpha-background-color($color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  background-color: $solid-color;
  background-color: $color;
}

// D-2
@mixin alpha-attribute($attribute, $color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  #{$attribute}: $solid-color;
  #{$attribute}: $color;
}

// ==========================================
// E. The @function directive to strip unit.
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

// ==========================================
// F. The @function directive to clamp a number.
// Clamping a number means restricting it between min and max values.
// Usage:
// 1. If the value is greater than the maximum value, it returns $max
// 2. If the value is lesser than or equals to the maximum value and
//  - if the value is lesser than the minimum value, it returns $min
//  - if the value is greater than or equals to the minimum value, it returns $value
@function clamp($value, $min, $max) {
  @return if($value > $max, $max, if($value < $min, $min, $value));
}

// ==========================================
// G. The @function directive for px to em string interpolation.
// @using Sass unitless() method.
$browser-context: 16;

@function em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  
  @return $pixels / $context * 1em;
}
