// -------------------------------------- //
// LogoType®: Advance CSS3: Cross Browser //
// -------------------------------------- //
//         Using @mixin directive         //
//                  ~   ~                 //
//                 (.) (.)                //
//                    -                   //
//                  `\^/`                 //
//        @author : Prabhat Kumar         //
//          @date : 11-May-2016           //
// -------------------------------------- //
// Sass - (3.4.21)     : Selective Steve  //
// Compass - (v1.0.3)  : Polaris          //
// -------------------------------------- //

// Path: logotype/source/core/scss/mixins/

// ==========================================
// B. Visually hide an element.
%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

// ==========================================
// C. CSS3 calc mixin.
@mixin axix-calc($property, $value) {
  #{$property}: -webkit-calc(#{$value});
  #{$property}: -moz-calc(#{$value});
  #{$property}: calc(#{$value});
}

// ==========================================
// D. Mixins for semi-transparent colors.
// D-1
@mixin alpha-background-color($color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  background-color: $solid-color;
  background-color: $color;
}

// D-2
@mixin alpha-attribute($attribute, $color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  #{$attribute}: $solid-color;
  #{$attribute}: $color;
}

// ==========================================
// E. The @function directive to strip unit.
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

// ==========================================
// F. The @function directive to clamp a number.
// Clamping a number means restricting it between min and max values.
// Usage:
// 1. If the value is greater than the maximum value, it returns $max
// 2. If the value is lesser than or equals to the maximum value and
//  - if the value is lesser than the minimum value, it returns $min
//  - if the value is greater than or equals to the minimum value, it returns $value
@function clamp($value, $min, $max) {
  @return if($value > $max, $max, if($value < $min, $min, $value));
}

// ==========================================
// G. The @function directive for px to em string interpolation.
// @using Sass unitless() method.
$browser-context: 16;

@function em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  
  @return $pixels / $context * 1em;
}

// ==========================================
// H. The @mixin directive for IE-7.
// @Using: @content directive.
@mixin apply-to-ie7 {
  // IE7 hack from -->
  // http://www.paulirish.com/2009/browser-specific-css-hacks/
  *:first-child+html & {
    @content;
  }
}

// ==========================================
// I. The @mixin directive for ::selection.
// The ::selection CSS pseudo-element applies rules to the portion of a document,
// that has been highlighted (e.g. selected with the mouse or another pointing device) by the user.
/// Note: Only a small subset of CSS properties can be used in a rule using ::selection in it's
/// selector: color, background-color, cursor, outline, text-decoration, text-emphasis-color and text-shadow.
@mixin axix-selection ($background, $color) {
  background: $background;
  color: $color;
}

// ============================================
// J. The @mixin directive for Size -->
//                             (width & height)
@mixin axix-size($width, $height: $width) {
  width: $width;
  height: $height;
}

// ============================================
// K. The @mixin directive to Centering.
// Horizontal, Vertical or Absolute Centering:
/// If specified, this mixin will use negative margins
/// based on element's dimensions. Else, it will rely
/// on CSS transforms which have a lesser browser support
/// but are more flexible as they don't require to set,
/// any specific dimensions to the element.
/// It accepts parameter(s):
/// @param {Length | null} $width [null] - element width.
/// @param {Length | null} $height [null] - element height.
@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
     -moz-transform: translate($x, $y);
      -ms-transform: translate($x, $y);
       -o-transform: translate($x, $y);
          transform: translate($x, $y);
}

@mixin translateY($y) {
  -webkit-transform: translateY($y);
     -moz-transform: translateY($y);
      -ms-transform: translateY($y);
       -o-transform: translateY($y);
          transform: translateY($y);
}

@mixin translateX($x) {
  -webkit-transform: translateX($x);
     -moz-transform: translateX($x);
      -ms-transform: translateX($x);
       -o-transform: translateX($x);
          transform: translateX($x);
}

@mixin axix-center($width: null, $height: null) {
  position: absolute;
  top: 50%;
  left: 50%;
  
  @if not $width and not $height {
    // To transform: translate(-50%, -50%).
    @include translate(-50%, -50%);
  } @else if $width and $height {
    width: $width;
    height: $height;
    margin: -($width / 2) #{0 0} -($height / 2)
  } @else if not $height {
    margin-left: -($width / 2);
    // To transform: translateY(-50%).
    @include translateY(-50%);
    width: $width;
  } @else {
    margin-top: -($height / 2);
    // To transform: translateX(-50%).
    @include translateX(-50%);
    height: $height;
  }
}

// ============================================
// L. Mixin helper to output vendor prefixes.
// @param {String} $property - Unprefixed CSS property
// @param {*} $value - Raw CSS value
// @param {List} $prefixes - List of prefixes to output
@mixin axix-prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }
  #{$property}: $value;
}

// ============================================
// M. The @mixin directive for Linear Gradient.
/// Convert angle
/// @param {Number} $value - Value to convert,
/// @param {String} $unit - Unit to convert to,
/// @return {Number} Converted angle.
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }
  // for warning message!
  @warn "AXIX®: Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle.
/// @param {*} $value - Value to test,
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax.
/// @param {Keyword | Angle} $value - Value to convert,
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    // for warning message!
    @warn "AXIX®: Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction.";
  }
  // Conversion Map.
  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );
  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }
  @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient.
/// as well as a plain color fallback,
/// and the `-webkit-`, `-moz-`, `-ms-` and `-o-` prefixed declaration.
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient.
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: -moz-linear-gradient(legacy-direction($direction), $color-stops);
  background: -ms-linear-gradient(legacy-direction($direction), $color-stops);
  background: -o-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

// ============================================
// N. The @mixin directive for ultimate mixin.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 1. Modernizr ultimate mixin:
//  1.1 Generate placholder name and selectors
//  1.2 Define placholder and print @content
//  1.3 Define feature selector and
//      extend the placeholder.
// 2. Aliases:
//  2.1 Yep - alias
//  2.2 Nope - alias
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// Usage:
/// .selector {
///   @include yep($features) { ... }
///   @include nope($features) { ... }
/// }
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 1. Modernizr mixin defined.
// ============================================
@mixin modernizr($features, $supports) {
  $everything-is-okay: true;
  // Use the 'no-' prefix if checking for unsuported features (e.g. `.no-translate3d`).
  $prefix: if($supports, '', 'no-');
  // Features selector:
  /// a) create a string if checking for supported features. We'll concatenate class names
  ///     later on (e.g. `.translate3d.opacity selector`),
  /// b) create a list if checking for unsuported features. We'll append the class names
  ///     later on (e.g. `.no-js selector, .no-translate3d selector`).
  $selector: if($supports, '', (unquote('.no-js')));
  // The placeholder (e.g. `%yep-translate3d` or `%nope-opacity`).
  $placeholder: if($supports, '%yep', '%nope');
  
  // 1.1 Generate placeholder and selectors
  // ======================================
  @each $feature in $features {
    // Making sure $feature is a string.
    @if type-of($feature) != string {
      $everything-is-okay: false;
      @warn 'AXIX®: `#{$feature} is not a string for `modernizr`.';
    } @else {
      // Add feature name to the placeholder string (e.g. '%yep' + '-' + 'translate3d' or '%nope' + '-' + 'translate3d').
      $placeholder: $placeholder + '-' + $feature;
      // Define the new selector string (e.g. `.translate3d` or `.no-translate3d`).
      $new-selector: #{'.' + $prefix + $feature};
      // Append the new selector:
      /// a) to the string if yep (e.g. `.translate3d.opacity`),
      /// b) to the list if nope (e.g. `.no-translate3d, .no-opacity`).
      $selector: if($supports, $selector + $new-selector, append($selector, $new-selector, comma));
    }
  }
  @if $everything-is-okay == true {
    // 1.2 Define the placholder and print @content
    // ============================================
    #{$placeholder} & {
      @content;
    }
    // 1.3 Define feature selector(s) and extend the placeholder
    // =========================================================
    @at-root #{$selector} {
      @extend #{$placeholder};
    }
  }
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 2. Aliases
// ============================================
// 2.1 Yep - alias
// ===============
@mixin yep($features...) {
  @include modernizr($features, $supports: true) {
    @content;
  }
}
// 2.2 Nope - alias
// ================
@mixin nope($features...) {
  @include modernizr($features, $supports: false) {
    @content;
  }
}

// ============================================
// O. A smart cache @mixin directive.
//    @author : Prabhat Kumar
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Global cache map.
$cache: ();

// Cache mixin.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@mixin cache($declarations) {
  // Looping through all properties/values from map.
  @each $property, $value in $declarations {
    // Get the stored values for the current property.
    $stored-values: map-get($cache, $property);
    // If the value doesn't exist in stored values.
    @if not index($stored-values, $value) {
      // Add it.
      $cache: map-merge($cache, ($property: append($stored-values or (), $value))) !global;
      // And create a placeholder at root level.
      @at-root %#{$property}-#{length(map-get($cache, $property))} {
        #{$property}: $value;
      }
    }
    // Extend the placeholder.
    @extend %#{$property}-#{index(map-get($cache, $property), $value)};
  }
}

// ==========================================
// P. The @mixin directive for Animations.
// The animation CSS property makes possible to animate transitions from one CSS style configuration to another.
// Properties Value:-
// P-1. animation - a shorthand property for below - "all".
// P-2. animation-name
// P-3. animation-duration
// P-4. animation-timing-function
// P-5. animation-delay
// P-6. animation-iteration-count
// P-7. animation-direction
// P-8. animation-fill-mode
// P-9. animation-play-state

// P-1.
@mixin animation($animation) {
  -webkit-animation: $animation;
     -moz-animation: $animation;
      -ms-animation: $animation;
       -o-animation: $animation;
          animation: $animation;
}
// P-2.
@mixin animation-name($name) {
  -webkit-animation-name: $name;
     -moz-animation-name: $name;
      -ms-animation-name: $name;
       -o-animation-name: $name;
          animation-name: $name;
}
// P-3.
@mixin animation-duration($duration) {
  -webkit-animation-duration: $duration;
     -moz-animation-duration: $duration;
      -ms-animation-duration: $duration;
       -o-animation-duration: $duration;
          animation-duration: $duration;
}
// P-4.
@mixin animation-timing-function($timing-function) {
  -webkit-animation-timing-function: $timing-function;
     -moz-animation-timing-function: $timing-function;
      -ms-animation-timing-function: $timing-function;
       -o-animation-timing-function: $timing-function;
          animation-timing-function: $timing-function;
}
// P-5.
@mixin animation-delay($delay) {
  -webkit-animation-delay: $delay;
     -moz-animation-delay: $delay;
      -ms-animation-delay: $delay;
       -o-animation-delay: $delay;
          animation-delay: $delay;
}
// P-6.
@mixin animation-iteration-count($iteration-count) {
  -webkit-animation-iteration-count: $iteration-count;
     -moz-animation-iteration-count: $iteration-count;
      -ms-animation-iteration-count: $iteration-count;
       -o-animation-iteration-count: $iteration-count;
          animation-iteration-count: $iteration-count;
}
// P-7.
@mixin animation-direction($direction) {
  -webkit-animation-direction: $direction;
     -moz-animation-direction: $direction;
      -ms-animation-direction: $direction;
       -o-animation-direction: $direction;
          animation-direction: $direction;
}
// P-8.
@mixin animation-fill-mode($fill-mode) {
  -webkit-animation-fill-mode: $fill-mode;
     -moz-animation-fill-mode: $fill-mode;
      -ms-animation-fill-mode: $fill-mode;
       -o-animation-fill-mode: $fill-mode;
          animation-fill-mode: $fill-mode;
}
// P-9. values: running || paused

// ==========================================
// Q. The @mixin directive for Transform.
// The CSS transform property can modify the coordinate space of the CSS visual formatting model.
// Using it, elements can be translated, rotated, scaled, and skewed.
// Values: none
// Function Values:-
// Q-1. scale
// Q-2. skew
// Q-3. translate
// Q-4. rotate
// Q-5. perspective
// Global Values:-
// Q-6. transform-origin

// Q-1.a
@mixin scale($ratio...) {
  -webkit-transform: scale($ratio);
     -moz-transform: scale($ratio);
      -ms-transform: scale($ratio);
       -o-transform: scale($ratio);
          transform: scale($ratio);
}
// Q-1.b
@mixin scaleX($ratio) {
  -webkit-transform: scaleX($ratio);
     -moz-transform: scaleX($ratio);
      -ms-transform: scaleX($ratio);
       -o-transform: scaleX($ratio);
          transform: scaleX($ratio);
}
// Q-1.c
@mixin scaleY($ratio) {
  -webkit-transform: scaleY($ratio);
     -moz-transform: scaleY($ratio);
      -ms-transform: scaleY($ratio);
       -o-transform: scaleY($ratio);
          transform: scaleY($ratio);
}
// Q-2.
@mixin skew($x, $y) {
  -webkit-transform: skewX($x) skewY($y);
     -moz-transform: skewX($x) skewY($y);
      -ms-transform: skewX($x) skewY($y);
       -o-transform: skewX($x) skewY($y);
          transform: skewX($x) skewY($y);
}
// Q-3.
@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
     -moz-transform: translate($x, $y);
      -ms-transform: translate($x, $y);
       -o-transform: translate($x, $y);
          transform: translate($x, $y);
}
// Q-3.a
@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
     -moz-transform: translate3d($x, $y, $z);
      -ms-transform: translate3d($x, $y, $z);
       -o-transform: translate3d($x, $y, $z);
          transform: translate3d($x, $y, $z);
}
// Q-4.
@mixin rotate($degrees) {
  -webkit-transform: rotate($degrees);
     -moz-transform: rotate($degrees);
      -ms-transform: rotate($degrees);
       -o-transform: rotate($degrees);
          transform: rotate($degrees);
}
// Q-4.a
@mixin rotateX($degrees) {
  -webkit-transform: rotateX($degrees);
     -moz-transform: rotateX($degrees);
      -ms-transform: rotateX($degrees);
       -o-transform: rotateX($degrees);
          transform: rotateX($degrees);
}
// Q-4.b
@mixin rotateY($degrees) {
  -webkit-transform: rotateY($degrees);
     -moz-transform: rotateY($degrees);
      -ms-transform: rotateY($degrees);
       -o-transform: rotateY($degrees);
          transform: rotateY($degrees);
}
// Q-5.
@mixin perspective($perspective) {
  -webkit-perspective: $perspective;
     -moz-perspective: $perspective;
      -ms-perspective: $perspective;
       -o-perspective: $perspective;
          perspective: $perspective;
}
// Q-5.a
@mixin perspective-origin($perspective) {
  -webkit-perspective-origin: $perspective;
     -moz-perspective-origin: $perspective;
      -ms-perspective-origin: $perspective;
       -o-perspective-origin: $perspective;
          perspective-origin: $perspective;
}
// Q-6.
@mixin transform-origin($origin) {
  -webkit-transform-origin: $origin;
     -moz-transform-origin: $origin;
      -ms-transform-origin: $origin;
       -o-transform-origin: $origin;
          transform-origin: $origin;
}

// ==========================================
// R. The @mixin directive for Transitions.
// The transition CSS property can enables to define the transition between two states of an element.
// Different states may be defined using pseudo-classes like :hover or :active or dynamically set using JavaScript.
// R-1. transition - a shorthand property for below - "all".
// R-2. transition-property
// R-3. transition-delay
// R-4. transition-duration
// R-5. transition-timing-function

// R-1.
@mixin transition($transition...) {
  -webkit-transition: $transition;
     -moz-transition: $transition;
      -ms-transition: $transition;
       -o-transition: $transition;
          transition: $transition;
}
// R-2.
@mixin transition-property($transition-property...) {
  -webkit-transition-property: $transition-property;
     -moz-transition-property: $transition-property;
      -ms-transition-property: $transition-property;
       -o-transition-property: $transition-property;
          transition-property: $transition-property;
}
// R-3.
@mixin transition-delay($transition-delay) {
  -webkit-transition-delay: $transition-delay;
     -moz-transition-delay: $transition-delay;
      -ms-transition-delay: $transition-delay;
       -o-transition-delay: $transition-delay;
          transition-delay: $transition-delay;
}
// R-4.
@mixin transition-duration($transition-duration...) {
  -webkit-transition-duration: $transition-duration;
     -moz-transition-duration: $transition-duration;
      -ms-transition-duration: $transition-duration;
       -o-transition-duration: $transition-duration;
          transition-duration: $transition-duration;
}
// R-5.
@mixin transition-timing-function($timing-function) {
  -webkit-transition-timing-function: $timing-function;
     -moz-transition-timing-function: $timing-function;
      -ms-transition-timing-function: $timing-function;
       -o-transition-timing-function: $timing-function;
          transition-timing-function: $timing-function;
}

// ============================================
// S. A smart Bubble Sort @mixin directive.
//    @author : Prabhat Kumar
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// Default order used to determine, which string comes first.
/// @type List
$default-order:
  "!" "#" "$" "%" "&" "'" "(" ")" "*" "+" "," "-" "." "/" "[" "\\" "]" "^" "_" "{" "|" "}" "~"
  "0" "1" "2" "3" "4" "5" "6" "7" "8" "9"
  "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z" !default;

// Compares two string to determine which comes first.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// @access private
/// @param {String} $a - first string
/// @parem {String} $b - second string
/// @param {List} $order - order to deal with
/// @return {Bool}
@function stringCompare($a, $b, $order) {
  @if type-of($a) == "number" and type-of($b) == "number" {
    @return $a < $b;
  }
  
  $a: to-lower-case($a + unquote(""));
  $b: to-lower-case($b + unquote(""));
  
  @for $i from 1 through min(str-length($a), str-length($b)) {
    $char-a: str-slice($a, $i, $i);
    $char-b: str-slice($b, $i, $i);
    
    @if $char-a and $char-b and index($order, $char-a) != index($order, $char-b) {
      @return index($order, $char-a) < index($order, $char-b);
    }
  }
  
  @return str-length($a) < str-length($b);
}

// Swaps values at indexes `$a` and `$b` from `$list`.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// @access private
/// @param {List} $list - list to update
/// @param {Number} $a - index of first element
/// @param {Number} $b - index of second element
/// @return {List}
@function swap($list, $a, $b) {
  @if abs($a) > length($list) or abs($b) > length($list) {
    @return $list;
  }
  
  $tmp: nth($list, $a);
  $list: set-nth($list, $a, nth($list, $b));
  $list: set-nth($list, $b, $tmp);
  
  @return $list;
}

// Bubble Sort
// ~~~~~~~~~~~
/// @access private
/// @param {List} $list - list to sort
/// @param {List} $order ($default-order) - order to use for sorting
/// @return {List}
/// @require {function} stringCompare
/// @require {function} swap
@function axix-bubble-sort($list, $order: $default-order) {
  @for $i from 1 through length($list) {
    @for $j from $i through 1 {
      @if $j > 1 and stringCompare(nth($list, $j), nth($list, $j - 1), $order) {
        $list: swap($list, $j, $j - 1);
      }
    }
  }
  @return $list;
}

// Sort function delaying to an algorithm-specific function depending on `$algorithm`.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/// @access public
/// @param {List} $list - list to sort
/// @param {List} $order ($default-order) - order to deal with
/// @param {String} $algorithm ("quick")  - algorithm to use
/// @return {List} - Sorted list
/// ------------------------------------
/// @require {function} axix-bubble-sort
@function sort($list, $order: $default-order, $algorithm: "quick") {
  @return call("#{$algorithm}-sort", $list, $order);
}

// Animation class hook -------------------
// Set the class name to trigger animations
// Defaults to "animated".
$AnimateHook: "animated";

// Animation duration ---------------
// Sets the hook's animation duration
// Defaults to 1s.
$AnimateDuration: 1s;

// Setting styles for the animation hook class
// -------------------------------------------
.#{$AnimateHook} {
  animation-duration: $AnimateDuration;
  animation-fill-mode: both;
  // Modifier for infinite repetition.
  &--infinite {
    @include animation-iteration-count(infinite);
  }
}

// ============================================
// T. Animate @mixin directive.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@mixin animate($name, $duration: $AnimateDuration, $delay: 0, $iterate: 1) {
  $delay: $delay + '';
  @if (str-index($delay, s) == null) {
    $delay: unquote($delay + 's');
  }
  animation: $name $duration $delay $iterate;
}

// ============================================
// U. AXIX-Animation @mixin directive.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@mixin axix-animation($animate...) {
  $max: length($animate);
  $animations: '';
  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};
    @if $i < $max {
      $animations: #{$animations + ", "};
    }
  }
  -webkit-animation: $animations;
     -moz-animation: $animations;
      -ms-animation: $animations;
       -o-animation: $animations;
          animation: $animations;
}

@mixin axix-keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-ms-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// The cubic-bezier() class of timing-functions.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// The cubic-bezier() functional notation defines a cubic Bézier curve.
// A cubic Bézier curve is defined by four points P0, P1, P2, and P3. P0 and P3 are the start and the end of the curve.
// Syntax: cubic-bezier(x1, y1, x2, y2);
// linear
$linear           : "0.250, 0.250, 0.750, 0.750"    !default;
// ease
$ease             : "0.250, 0.100, 0.250, 1.000"    !default;
$ease-in          : "0.420, 0.000, 1.000, 1.000"    !default;
$ease-out         : "0.000, 0.000, 0.580, 1.000"    !default;
$ease-in-out      : "0.420, 0.000, 0.580, 1.000"    !default;
// ease-in
$easeInQuad       : "0.550, 0.085, 0.680, 0.530"    !default;
$easeInCubic      : "0.550, 0.055, 0.675, 0.190"    !default;
$easeInQuart      : "0.895, 0.030, 0.685, 0.220"    !default;
$easeInQuint      : "0.755, 0.050, 0.855, 0.060"    !default;
$easeInSine       : "0.470, 0.000, 0.745, 0.715"    !default;
$easeInExpo       : "0.950, 0.050, 0.795, 0.035"    !default;
$easeInCirc       : "0.600, 0.040, 0.980, 0.335"    !default;
$easeInBack       : "0.600, -0.280, 0.735, 0.045"   !default;
// ease-out
$easeOutQuad      :  "0.250, 0.460, 0.450, 0.940"   !default;
$easeOutCubic     :  "0.215, 0.610, 0.355, 1.000"   !default;
$easeOutQuart     :  "0.165, 0.840, 0.440, 1.000"   !default;
$easeOutQuint     :  "0.230, 1.000, 0.320, 1.000"   !default;
$easeOutSine      :  "0.390, 0.575, 0.565, 1.000"   !default;
$easeOutExpo      :  "0.190, 1.000, 0.220, 1.000"   !default;
$easeOutCirc      :  "0.075, 0.820, 0.165, 1.000"   !default;
$easeOutBack      :  "0.175, 0.885, 0.320, 1.275"   !default;
// ease-in-out
$easeInOutQuad    :  "0.455, 0.030, 0.515, 0.955"   !default;
$easeInOutCubic   :  "0.645, 0.045, 0.355, 1.000"   !default;
$easeInOutQuart   :  "0.770, 0.000, 0.175, 1.000"   !default;
$easeInOutQuint   :  "0.860, 0.000, 0.070, 1.000"   !default;
$easeInOutSine    :  "0.445, 0.050, 0.550, 0.950"   !default;
$easeInOutExpo    :  "1.000, 0.000, 0.000, 1.000"   !default;
$easeInOutCirc    :  "0.785, 0.135, 0.150, 0.860"   !default;
$easeInOutBack    :  "0.680, -0.550, 0.265, 1.550"  !default;

// Ceaser CSS Easing Transitions.
